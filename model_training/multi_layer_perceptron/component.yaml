name: Multi layer perceptron
description: Trains a multi-layer perceptron model.
inputs:
- {name: inputs_dataset, type: Dataset}
- {name: labels_dataset, type: Dataset}
- name: hidden_layer_sizes
  type: String
  description: |-
    array-like of shape(n_layers - 2,), default=(100,)
    The ith element represents the number of neurons in the ith
    hidden layer.
  default: (100,)
  optional: true
- name: activation
  type: String
  description: |-
    {'identity', 'logistic', 'tanh', 'relu'}, default='relu'
    Activation function for the hidden layer.

    - 'identity', no-op activation, useful to implement linear bottleneck,
      returns f(x) = x

    - 'logistic', the logistic sigmoid function,
      returns f(x) = 1 / (1 + exp(-x)).

    - 'tanh', the hyperbolic tan function,
      returns f(x) = tanh(x).

    - 'relu', the rectified linear unit function,
      returns f(x) = max(0, x)
  default: relu
  optional: true
- name: solver
  type: String
  description: |-
    {'lbfgs', 'sgd', 'adam'}, default='adam'
    The solver for weight optimization.

    - 'lbfgs' is an optimizer in the family of quasi-Newton methods.

    - 'sgd' refers to stochastic gradient descent.

    - 'adam' refers to a stochastic gradient-based optimizer proposed by
      Kingma, Diederik, and Jimmy Ba

    Note: The default solver 'adam' works pretty well on relatively
    large datasets (with thousands of training samples or more) in terms of
    both training time and validation score.
    For small datasets, however, 'lbfgs' can converge faster and perform
    better.
  default: adam
  optional: true
- name: alpha
  type: Float
  description: |-
    float, default=0.0001
    Strength of the L2 regularization term. The L2 regularization term
    is divided by the sample size when added to the loss.
  default: '0.0001'
  optional: true
- name: batch_size
  type: String
  description: |-
    int, default='auto'
    Size of minibatches for stochastic optimizers.
    If the solver is 'lbfgs', the classifier will not use minibatch.
    When set to "auto", `batch_size=min(200, n_samples)`.
  default: auto
  optional: true
- name: learning_rate
  type: String
  description: |-
    {'constant', 'invscaling', 'adaptive'}, default='constant'
    Learning rate schedule for weight updates.

    - 'constant' is a constant learning rate given by
      'learning_rate_init'.

    - 'invscaling' gradually decreases the learning rate ``learning_rate_``
      at each time step 't' using an inverse scaling exponent of 'power_t'.
      effective_learning_rate = learning_rate_init / pow(t, power_t)

    - 'adaptive' keeps the learning rate constant to
      'learning_rate_init' as long as training loss keeps decreasing.
      Each time two consecutive epochs fail to decrease training loss by at
      least tol, or fail to increase validation score by at least tol if
      'early_stopping' is on, the current learning rate is divided by 5.

    Only used when solver='sgd'.
  default: constant
  optional: true
- name: learning_rate_init
  type: Float
  description: |-
    float, default=0.001
    The initial learning rate used. It controls the step-size
    in updating the weights. Only used when solver='sgd' or 'adam'.
  default: '0.001'
  optional: true
- name: power_t
  type: Float
  description: |-
    float, default=0.5
    The exponent for inverse scaling learning rate.
    It is used in updating effective learning rate when the learning_rate
    is set to 'invscaling'. Only used when solver='sgd'.
  default: '0.5'
  optional: true
- name: max_iter
  type: Integer
  description: |-
    int, default=200
    Maximum number of iterations. The solver iterates until convergence
    (determined by 'tol') or this number of iterations. For stochastic
    solvers ('sgd', 'adam'), note that this determines the number of epochs
    (how many times each data point will be used), not the number of
    gradient steps.
  default: '200'
  optional: true
- name: shuffle
  type: Boolean
  description: |-
    bool, default=True
    Whether to shuffle samples in each iteration. Only used when
    solver='sgd' or 'adam'.
  default: "True"
  optional: true
- name: random_state
  type: Integer
  description: |-
    int, RandomState instance, default=None
    Determines random number generation for weights and bias
    initialization, train-test split if early stopping is used, and batch
    sampling when solver='sgd' or 'adam'.
    Pass an int for reproducible results across multiple function calls.
    See :term:`Glossary <random_state>`.
  optional: true
- name: tol
  type: Float
  description: |-
    float, default=1e-4
    Tolerance for the optimization. When the loss or score is not improving
    by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,
    unless ``learning_rate`` is set to 'adaptive', convergence is
    considered to be reached and training stops.
  default: '0.0001'
  optional: true
- name: warm_start
  type: Boolean
  description: |-
    bool, default=False
    When set to True, reuse the solution of the previous
    call to fit as initialization, otherwise, just erase the
    previous solution. See :term:`the Glossary <warm_start>`.
  default: "False"
  optional: true
- name: momentum
  type: Float
  description: |-
    float, default=0.9
    Momentum for gradient descent update.  Should be between 0 and 1. Only
    used when solver='sgd'.
  default: '0.9'
  optional: true
- name: nesterovs_momentum
  type: Boolean
  description: |-
    bool, default=True
    Whether to use Nesterov's momentum. Only used when solver='sgd' and
    momentum > 0.
  default: "True"
  optional: true
- name: early_stopping
  type: Boolean
  description: |-
    bool, default=False
    Whether to use early stopping to terminate training when validation
    score is not improving. If set to true, it will automatically set
    aside 10% of training data as validation and terminate training when
    validation score is not improving by at least ``tol`` for
    ``n_iter_no_change`` consecutive epochs.
    Only effective when solver='sgd' or 'adam'.
  default: "False"
  optional: true
- name: validation_fraction
  type: Float
  description: |-
    float, default=0.1
    The proportion of training data to set aside as validation set for
    early stopping. Must be between 0 and 1.
    Only used if early_stopping is True.
  default: '0.1'
  optional: true
- name: beta_1
  type: Float
  description: |-
    float, default=0.9
    Exponential decay rate for estimates of first moment vector in adam,
    should be in [0, 1). Only used when solver='adam'.
  default: '0.9'
  optional: true
- name: beta_2
  type: Float
  description: |-
    float, default=0.999
    Exponential decay rate for estimates of second moment vector in adam,
    should be in [0, 1). Only used when solver='adam'.
  default: '0.999'
  optional: true
- name: epsilon
  type: Float
  description: |-
    float, default=1e-8
    Value for numerical stability in adam. Only used when solver='adam'.
  default: 1e-08
  optional: true
- name: n_iter_no_change
  type: Integer
  description: |-
    int, default=10
    Maximum number of epochs to not meet ``tol`` improvement.
    Only effective when solver='sgd' or 'adam'.
  default: '10'
  optional: true
- name: max_fun
  type: Integer
  description: |-
    int, default=15000
    Only used when solver='lbfgs'. Maximum number of function calls.
    The solver iterates until convergence (determined by 'tol'), number
    of iterations reaches max_iter, or this number of function calls.
    Note that number of function calls will be greater than or equal to
    the number of iterations for the MLPRegressor.
  default: '15000'
  optional: true
outputs:
- {name: trained_model, type: Model}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'scikit-learn' 'numpy' 'kfp==1.8.19' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def multi_layer_perceptron(
              inputs_dataset: Input[Dataset],
              labels_dataset: Input[Dataset],
              trained_model: Output[Model],
              hidden_layer_sizes: str = "(100,)",
              activation: str = "relu",
              solver: str = "adam",
              alpha: float = 0.0001,
              batch_size: str = "auto",
              learning_rate: str = "constant",
              learning_rate_init: float = 0.001,
              power_t: float = 0.5,
              max_iter: int = 200,
              shuffle: bool = True,
              random_state: int = None,
              tol: float = 1e-4,
              warm_start: bool = False,
              momentum: float = 0.9,
              nesterovs_momentum: bool = True,
              early_stopping: bool = False,
              validation_fraction: float = 0.1,
              beta_1: float = 0.9,
              beta_2: float = 0.999,
              epsilon: float = 1e-8,
              n_iter_no_change: int = 10,
              max_fun: int = 15000,
      ):
          """
          Trains a multi-layer perceptron model.
          :param hidden_layer_sizes : array-like of shape(n_layers - 2,), default=(100,)
              The ith element represents the number of neurons in the ith
              hidden layer.

          :param activation : {'identity', 'logistic', 'tanh', 'relu'}, default='relu'
              Activation function for the hidden layer.

              - 'identity', no-op activation, useful to implement linear bottleneck,
                returns f(x) = x

              - 'logistic', the logistic sigmoid function,
                returns f(x) = 1 / (1 + exp(-x)).

              - 'tanh', the hyperbolic tan function,
                returns f(x) = tanh(x).

              - 'relu', the rectified linear unit function,
                returns f(x) = max(0, x)

          :param solver : {'lbfgs', 'sgd', 'adam'}, default='adam'
              The solver for weight optimization.

              - 'lbfgs' is an optimizer in the family of quasi-Newton methods.

              - 'sgd' refers to stochastic gradient descent.

              - 'adam' refers to a stochastic gradient-based optimizer proposed by
                Kingma, Diederik, and Jimmy Ba

              Note: The default solver 'adam' works pretty well on relatively
              large datasets (with thousands of training samples or more) in terms of
              both training time and validation score.
              For small datasets, however, 'lbfgs' can converge faster and perform
              better.

          :param alpha : float, default=0.0001
              Strength of the L2 regularization term. The L2 regularization term
              is divided by the sample size when added to the loss.

          :param batch_size : int, default='auto'
              Size of minibatches for stochastic optimizers.
              If the solver is 'lbfgs', the classifier will not use minibatch.
              When set to "auto", `batch_size=min(200, n_samples)`.

          :param learning_rate : {'constant', 'invscaling', 'adaptive'}, default='constant'
              Learning rate schedule for weight updates.

              - 'constant' is a constant learning rate given by
                'learning_rate_init'.

              - 'invscaling' gradually decreases the learning rate ``learning_rate_``
                at each time step 't' using an inverse scaling exponent of 'power_t'.
                effective_learning_rate = learning_rate_init / pow(t, power_t)

              - 'adaptive' keeps the learning rate constant to
                'learning_rate_init' as long as training loss keeps decreasing.
                Each time two consecutive epochs fail to decrease training loss by at
                least tol, or fail to increase validation score by at least tol if
                'early_stopping' is on, the current learning rate is divided by 5.

              Only used when solver='sgd'.

          :param learning_rate_init : float, default=0.001
              The initial learning rate used. It controls the step-size
              in updating the weights. Only used when solver='sgd' or 'adam'.

          :param power_t : float, default=0.5
              The exponent for inverse scaling learning rate.
              It is used in updating effective learning rate when the learning_rate
              is set to 'invscaling'. Only used when solver='sgd'.

          :param max_iter : int, default=200
              Maximum number of iterations. The solver iterates until convergence
              (determined by 'tol') or this number of iterations. For stochastic
              solvers ('sgd', 'adam'), note that this determines the number of epochs
              (how many times each data point will be used), not the number of
              gradient steps.

          :param shuffle : bool, default=True
              Whether to shuffle samples in each iteration. Only used when
              solver='sgd' or 'adam'.

          :param random_state : int, RandomState instance, default=None
              Determines random number generation for weights and bias
              initialization, train-test split if early stopping is used, and batch
              sampling when solver='sgd' or 'adam'.
              Pass an int for reproducible results across multiple function calls.
              See :term:`Glossary <random_state>`.

          :param tol : float, default=1e-4
              Tolerance for the optimization. When the loss or score is not improving
              by at least ``tol`` for ``n_iter_no_change`` consecutive iterations,
              unless ``learning_rate`` is set to 'adaptive', convergence is
              considered to be reached and training stops.

          :param warm_start : bool, default=False
              When set to True, reuse the solution of the previous
              call to fit as initialization, otherwise, just erase the
              previous solution. See :term:`the Glossary <warm_start>`.

          :param momentum : float, default=0.9
              Momentum for gradient descent update.  Should be between 0 and 1. Only
              used when solver='sgd'.

          :param nesterovs_momentum : bool, default=True
              Whether to use Nesterov's momentum. Only used when solver='sgd' and
              momentum > 0.

          :param early_stopping : bool, default=False
              Whether to use early stopping to terminate training when validation
              score is not improving. If set to true, it will automatically set
              aside 10% of training data as validation and terminate training when
              validation score is not improving by at least ``tol`` for
              ``n_iter_no_change`` consecutive epochs.
              Only effective when solver='sgd' or 'adam'.

          :param validation_fraction : float, default=0.1
              The proportion of training data to set aside as validation set for
              early stopping. Must be between 0 and 1.
              Only used if early_stopping is True.

          :param beta_1 : float, default=0.9
              Exponential decay rate for estimates of first moment vector in adam,
              should be in [0, 1). Only used when solver='adam'.

          :param beta_2 : float, default=0.999
              Exponential decay rate for estimates of second moment vector in adam,
              should be in [0, 1). Only used when solver='adam'.

          :param epsilon : float, default=1e-8
              Value for numerical stability in adam. Only used when solver='adam'.

          :param n_iter_no_change : int, default=10
              Maximum number of epochs to not meet ``tol`` improvement.
              Only effective when solver='sgd' or 'adam'.

          :param max_fun : int, default=15000
              Only used when solver='lbfgs'. Maximum number of function calls.
              The solver iterates until convergence (determined by 'tol'), number
              of iterations reaches max_iter, or this number of function calls.
              Note that number of function calls will be greater than or equal to
              the number of iterations for the MLPRegressor.

          :return:
          """
          from sklearn.neural_network import MLPRegressor
          import numpy as np
          import joblib

          X = np.genfromtxt(inputs_dataset.path, delimiter=",")
          y = np.genfromtxt(labels_dataset.path, delimiter=",")

          model = MLPRegressor(
              activation=activation,
              solver=solver,
              alpha=alpha,
              batch_size=batch_size,
              learning_rate=learning_rate,
              learning_rate_init=learning_rate_init,
              power_t=power_t,
              max_iter=max_iter,
              shuffle=shuffle,
              random_state=random_state,
              tol=tol,
              verbose=True,
              warm_start=warm_start,
              momentum=momentum,
              nesterovs_momentum=nesterovs_momentum,
              early_stopping=early_stopping,
              validation_fraction=validation_fraction,
              beta_1=beta_1,
              beta_2=beta_2,
              epsilon=epsilon,
              n_iter_no_change=n_iter_no_change,
              max_fun=max_fun,
          ).fit(X, y)

          joblib.dump(model, trained_model.path)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - multi_layer_perceptron
